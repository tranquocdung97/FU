import java.util.*;

public class ShortestPathBetweenCities {
    
    static int shortestPath(int n, int[][] e, int u, int v) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] edge : e) {
            int city1 = edge[0];
            int city2 = edge[1];
            graph.get(city1).add(city2);
            graph.get(city2).add(city1);
        }
    
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n + 1];
        int[] distance = new int[n + 1];
        Arrays.fill(distance, -1);
        
        queue.offer(u);
        visited[u] = true;
        distance[u] = 0;
        
        while (!queue.isEmpty()) {
            int currentCity = queue.poll();
            
            for (int neighbor : graph.get(currentCity)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    distance[neighbor] = distance[currentCity] + 1;
                    queue.offer(neighbor);
                }
            }
        }
        
        return distance[v];
    }
    
    public static void main(String[] args) {
        int n = 6;
        int[][] e = {{1,3}, {1,2}, {2, 3}, {3,4}, {2,5}, {4,6}, {6,5}, {4,5}};
        int u = 1;
        int v = 5;
        System.out.println(shortestPath(n, e, u, v));  
        
        n = 2;
        e = new int[][]{{1,2}, {3,4}};
        u = 2;
        v = 3;
        System.out.println(shortestPath(n, e, u, v)); 
    }
}