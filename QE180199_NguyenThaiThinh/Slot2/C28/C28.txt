import java.util.Scanner;

class Node 
{\\learning\\data-structure-and-algorithms
    public Node pre;
    public Node next;
    public int number;

    public Node(int number)
    {
        this.number = number;
        pre = null;
        next = null;
    }
}

class LinkedList 
{
    public Node head;
    public Node tail;
    public static int size;
    
    public void creatList(int x)
    {
        this.head = new Node(x);
        this.tail = this.head;
        this.size++;
    }

    public void addHead(int x)
    {
        Node newNode = new Node(x);
        newNode.next = this.head;
        this.head.pre = newNode;
        this.head = newNode;
        this.size++;
    }

    public void addToTail(int x) 
    {       
        Node newNode = new Node(x);
        newNode.pre = this.tail;
        this.tail.next = newNode;
        this.tail = newNode;
        this.size++;
    }

   public void addAt(int k, int x){
        int count = 0;
        Node currentNode = this.head;
        while(count != k){
            if (count == k - 1){
            Node newNode = new Node(x);
            newNode.pre = currentNode;
            newNode.next = currentNode.next;
            currentNode.next.pre = newNode;
            currentNode.next = newNode;
            }
            currentNode = currentNode.next;
            count++;
        }
        this.size++;
    }
    
    public void show() 
    {
        Node currentNode = this.head;
        while (currentNode != null) {
            System.out.print(currentNode.number + " ");
            currentNode = currentNode.next;
        }
    }
}

public class DoubleLinkedList 
{
    public static void main(String[] args)
    {
        LinkedList s = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        s.creatList(sc.nextInt());
        for (int i = 1; i < n; i++){
            s.addToTail(sc.nextInt());
        }
        int k = sc.nextInt();
        int x = sc.nextInt();
        if (k == 0){
            s.addHead(x);
        } else if(k > s.size){
            s.addToTail(x);
        }
        else {
            s.addAt(k, x);
        }
        s.show();
    }
}