import java.util.Scanner;

class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    static Node root;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n, item, x;
        n = scanner.nextInt();

        for (int i = 0; i < n; i++) {
            item = scanner.nextInt();
            root = insert(root, item);
        }

        x = scanner.nextInt();
        root = removeNode(root, x);

        if (root != null) {
            inOrder(root);
        } else {
            System.out.println("NULL");
        }
    }

    static Node removeNode(Node root, int item) {
        if (root == null) {
            return root;
        }

        if (item < root.data) {
            root.left = removeNode(root.left, item);
        } else if (item > root.data) {
            root.right = removeNode(root.right, item);
        } else {
            freeNode(root);
            return null;
        }

        return root;
    }

    static void freeNode(Node node) {
        if (node == null) {
            return;
        }

        if (node.left != null) {
            freeNode(node.left);
        }

        if (node.right != null) {
            freeNode(node.right);
        }

        node = null;
    }

    static Node create(int item) {
        return new Node(item);
    }

    static Node insert(Node root, int item) {
        if (root == null) {
            return create(item);
        }

        if (item < root.data) {
            root.left = insert(root.left, item);
        } else {
            root.right = insert(root.right, item);
        }

        return root;
    }

    static void inOrder(Node node) {
        if (node == null) {
            return;
        }

        inOrder(node.left);
        System.out.print(node.data + " ");
        inOrder(node.right);
    }
}