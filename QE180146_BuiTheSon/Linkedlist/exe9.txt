import java.util.Scanner;

class Node {
    int data;
    Node next;
    Node pre;
}

class DouList {
    Node head;
    Node tail;
}

public class Main {
    public static DouList createList(int x) {
        DouList l = new DouList();
        l.head = new Node();
        l.head.data = x;
        l.head.pre = null;
        l.head.next = null;
        l.tail = l.head;
        return l;
    }

    public static DouList addTail(DouList l, int x) {
        Node temp = new Node();
        temp.data = x;
        temp.next = null;
        temp.pre = l.tail;
        l.tail.next = temp;
        l.tail = temp;
        return l;
    }

    public static DouList deleteHead(DouList l) {
        Node p = l.head.next;
        Node temp = l.head;
        p.pre = null;
        l.head = p;
        temp = null;
        return l;
    }

    public static DouList deleteTail(DouList l) {
        Node p = l.tail.pre;
        Node temp = l.tail;
        p.next = null;
        l.tail = p;
        temp = null;
        return l;
    }

    public static DouList deleteAt(DouList l, int k) {
        Node p = l.head;
        for (int i = 0; i < k - 1; i++) {
            p = p.next;
        }
        Node temp = p.next;
        Node p2 = temp.next;
        p.next = p2;
        p2.pre = p;
        temp = null;
        return l;
    }

    public static void printList(DouList l) {
        Node p = l.head;
        while (p != null) {
            System.out.print(p.data + " ");
            p = p.next;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        DouList l = createList(x);
        for (int i = 1; i < n; i++) {
            x = scanner.nextInt();
            l = addTail(l, x);
        }
        int k = scanner.nextInt();
        if (k == 0) {
            l = deleteHead(l);
        } else if (k == n - 1) {
            l = deleteTail(l);
        } else {
            l = deleteAt(l, k);
        }
        printList(l);
    }
}